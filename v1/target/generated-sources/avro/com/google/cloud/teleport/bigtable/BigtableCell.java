/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.google.cloud.teleport.bigtable;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BigtableCell extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7682829203672409219L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"BigtableCell\",\"namespace\":\"com.google.cloud.teleport.bigtable\",\"fields\":[{\"name\":\"family\",\"type\":\"string\"},{\"name\":\"qualifier\",\"type\":\"bytes\"},{\"name\":\"timestamp\",\"type\":\"long\",\"logicalType\":\"timestamp-micros\"},{\"name\":\"value\",\"type\":\"bytes\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<BigtableCell> ENCODER =
      new BinaryMessageEncoder<BigtableCell>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<BigtableCell> DECODER =
      new BinaryMessageDecoder<BigtableCell>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<BigtableCell> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<BigtableCell> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<BigtableCell>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this BigtableCell to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a BigtableCell from a ByteBuffer. */
  public static BigtableCell fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence family;
  @Deprecated public java.nio.ByteBuffer qualifier;
  @Deprecated public long timestamp;
  @Deprecated public java.nio.ByteBuffer value;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public BigtableCell() {}

  /**
   * All-args constructor.
   * @param family The new value for family
   * @param qualifier The new value for qualifier
   * @param timestamp The new value for timestamp
   * @param value The new value for value
   */
  public BigtableCell(java.lang.CharSequence family, java.nio.ByteBuffer qualifier, java.lang.Long timestamp, java.nio.ByteBuffer value) {
    this.family = family;
    this.qualifier = qualifier;
    this.timestamp = timestamp;
    this.value = value;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return family;
    case 1: return qualifier;
    case 2: return timestamp;
    case 3: return value;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: family = (java.lang.CharSequence)value$; break;
    case 1: qualifier = (java.nio.ByteBuffer)value$; break;
    case 2: timestamp = (java.lang.Long)value$; break;
    case 3: value = (java.nio.ByteBuffer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'family' field.
   * @return The value of the 'family' field.
   */
  public java.lang.CharSequence getFamily() {
    return family;
  }

  /**
   * Sets the value of the 'family' field.
   * @param value the value to set.
   */
  public void setFamily(java.lang.CharSequence value) {
    this.family = value;
  }

  /**
   * Gets the value of the 'qualifier' field.
   * @return The value of the 'qualifier' field.
   */
  public java.nio.ByteBuffer getQualifier() {
    return qualifier;
  }

  /**
   * Sets the value of the 'qualifier' field.
   * @param value the value to set.
   */
  public void setQualifier(java.nio.ByteBuffer value) {
    this.qualifier = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.Long getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.Long value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'value' field.
   * @return The value of the 'value' field.
   */
  public java.nio.ByteBuffer getValue() {
    return value;
  }

  /**
   * Sets the value of the 'value' field.
   * @param value the value to set.
   */
  public void setValue(java.nio.ByteBuffer value) {
    this.value = value;
  }

  /**
   * Creates a new BigtableCell RecordBuilder.
   * @return A new BigtableCell RecordBuilder
   */
  public static com.google.cloud.teleport.bigtable.BigtableCell.Builder newBuilder() {
    return new com.google.cloud.teleport.bigtable.BigtableCell.Builder();
  }

  /**
   * Creates a new BigtableCell RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new BigtableCell RecordBuilder
   */
  public static com.google.cloud.teleport.bigtable.BigtableCell.Builder newBuilder(com.google.cloud.teleport.bigtable.BigtableCell.Builder other) {
    return new com.google.cloud.teleport.bigtable.BigtableCell.Builder(other);
  }

  /**
   * Creates a new BigtableCell RecordBuilder by copying an existing BigtableCell instance.
   * @param other The existing instance to copy.
   * @return A new BigtableCell RecordBuilder
   */
  public static com.google.cloud.teleport.bigtable.BigtableCell.Builder newBuilder(com.google.cloud.teleport.bigtable.BigtableCell other) {
    return new com.google.cloud.teleport.bigtable.BigtableCell.Builder(other);
  }

  /**
   * RecordBuilder for BigtableCell instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<BigtableCell>
    implements org.apache.avro.data.RecordBuilder<BigtableCell> {

    private java.lang.CharSequence family;
    private java.nio.ByteBuffer qualifier;
    private long timestamp;
    private java.nio.ByteBuffer value;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.google.cloud.teleport.bigtable.BigtableCell.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.family)) {
        this.family = data().deepCopy(fields()[0].schema(), other.family);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.qualifier)) {
        this.qualifier = data().deepCopy(fields()[1].schema(), other.qualifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing BigtableCell instance
     * @param other The existing instance to copy.
     */
    private Builder(com.google.cloud.teleport.bigtable.BigtableCell other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.family)) {
        this.family = data().deepCopy(fields()[0].schema(), other.family);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.qualifier)) {
        this.qualifier = data().deepCopy(fields()[1].schema(), other.qualifier);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[2].schema(), other.timestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.value)) {
        this.value = data().deepCopy(fields()[3].schema(), other.value);
        fieldSetFlags()[3] = true;
      }
    }

    /**
      * Gets the value of the 'family' field.
      * @return The value.
      */
    public java.lang.CharSequence getFamily() {
      return family;
    }

    /**
      * Sets the value of the 'family' field.
      * @param value The value of 'family'.
      * @return This builder.
      */
    public com.google.cloud.teleport.bigtable.BigtableCell.Builder setFamily(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.family = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'family' field has been set.
      * @return True if the 'family' field has been set, false otherwise.
      */
    public boolean hasFamily() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'family' field.
      * @return This builder.
      */
    public com.google.cloud.teleport.bigtable.BigtableCell.Builder clearFamily() {
      family = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'qualifier' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getQualifier() {
      return qualifier;
    }

    /**
      * Sets the value of the 'qualifier' field.
      * @param value The value of 'qualifier'.
      * @return This builder.
      */
    public com.google.cloud.teleport.bigtable.BigtableCell.Builder setQualifier(java.nio.ByteBuffer value) {
      validate(fields()[1], value);
      this.qualifier = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'qualifier' field has been set.
      * @return True if the 'qualifier' field has been set, false otherwise.
      */
    public boolean hasQualifier() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'qualifier' field.
      * @return This builder.
      */
    public com.google.cloud.teleport.bigtable.BigtableCell.Builder clearQualifier() {
      qualifier = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.Long getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public com.google.cloud.teleport.bigtable.BigtableCell.Builder setTimestamp(long value) {
      validate(fields()[2], value);
      this.timestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public com.google.cloud.teleport.bigtable.BigtableCell.Builder clearTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'value' field.
      * @return The value.
      */
    public java.nio.ByteBuffer getValue() {
      return value;
    }

    /**
      * Sets the value of the 'value' field.
      * @param value The value of 'value'.
      * @return This builder.
      */
    public com.google.cloud.teleport.bigtable.BigtableCell.Builder setValue(java.nio.ByteBuffer value) {
      validate(fields()[3], value);
      this.value = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'value' field has been set.
      * @return True if the 'value' field has been set, false otherwise.
      */
    public boolean hasValue() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'value' field.
      * @return This builder.
      */
    public com.google.cloud.teleport.bigtable.BigtableCell.Builder clearValue() {
      value = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public BigtableCell build() {
      try {
        BigtableCell record = new BigtableCell();
        record.family = fieldSetFlags()[0] ? this.family : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.qualifier = fieldSetFlags()[1] ? this.qualifier : (java.nio.ByteBuffer) defaultValue(fields()[1]);
        record.timestamp = fieldSetFlags()[2] ? this.timestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.value = fieldSetFlags()[3] ? this.value : (java.nio.ByteBuffer) defaultValue(fields()[3]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<BigtableCell>
    WRITER$ = (org.apache.avro.io.DatumWriter<BigtableCell>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<BigtableCell>
    READER$ = (org.apache.avro.io.DatumReader<BigtableCell>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
