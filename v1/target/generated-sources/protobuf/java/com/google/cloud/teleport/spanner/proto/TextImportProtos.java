// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: text_import.proto

package com.google.cloud.teleport.spanner.proto;

public final class TextImportProtos {
  private TextImportProtos() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface ImportManifestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:com.google.cloud.teleport.spanner.proto.ImportManifest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The TableManifest of the tables to be imported.
     * </pre>
     *
     * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
     */
    java.util.List<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest> 
        getTablesList();
    /**
     * <pre>
     * The TableManifest of the tables to be imported.
     * </pre>
     *
     * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
     */
    com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest getTables(int index);
    /**
     * <pre>
     * The TableManifest of the tables to be imported.
     * </pre>
     *
     * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
     */
    int getTablesCount();
    /**
     * <pre>
     * The TableManifest of the tables to be imported.
     * </pre>
     *
     * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
     */
    java.util.List<? extends com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifestOrBuilder> 
        getTablesOrBuilderList();
    /**
     * <pre>
     * The TableManifest of the tables to be imported.
     * </pre>
     *
     * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
     */
    com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifestOrBuilder getTablesOrBuilder(
        int index);

    /**
     * <pre>
     * The dialect of the database to be imported.
     * </pre>
     *
     * <code>.com.google.cloud.teleport.spanner.proto.ProtoDialect dialect = 2;</code>
     */
    int getDialectValue();
    /**
     * <pre>
     * The dialect of the database to be imported.
     * </pre>
     *
     * <code>.com.google.cloud.teleport.spanner.proto.ProtoDialect dialect = 2;</code>
     */
    com.google.cloud.teleport.spanner.proto.ExportProtos.ProtoDialect getDialect();
  }
  /**
   * <pre>
   * Protobuf of the import manifest, consisting of a list of TableManifest.
   * </pre>
   *
   * Protobuf type {@code com.google.cloud.teleport.spanner.proto.ImportManifest}
   */
  public  static final class ImportManifest extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:com.google.cloud.teleport.spanner.proto.ImportManifest)
      ImportManifestOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use ImportManifest.newBuilder() to construct.
    private ImportManifest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private ImportManifest() {
      tables_ = java.util.Collections.emptyList();
      dialect_ = 0;
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private ImportManifest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownFieldProto3(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                tables_ = new java.util.ArrayList<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest>();
                mutable_bitField0_ |= 0x00000001;
              }
              tables_.add(
                  input.readMessage(com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.parser(), extensionRegistry));
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              dialect_ = rawValue;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          tables_ = java.util.Collections.unmodifiableList(tables_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.class, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.Builder.class);
    }

    public interface TableManifestOrBuilder extends
        // @@protoc_insertion_point(interface_extends:com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <pre>
       * The name of the destination table.
       * </pre>
       *
       * <code>string table_name = 1;</code>
       */
      java.lang.String getTableName();
      /**
       * <pre>
       * The name of the destination table.
       * </pre>
       *
       * <code>string table_name = 1;</code>
       */
      com.google.protobuf.ByteString
          getTableNameBytes();

      /**
       * <pre>
       * Text files to be imported. These can be either file name or GLOB pattern.
       * File pattern will be expanded to include all matching files during
       * importing process.
       * (-- When using GLOB patterns in the files field, please make sure the
       * patterns match input files properly. For example, assuming input files
       * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
       * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
       * "partsupp*". However, table PART cannot use "part*", as it will
       * incorrectly match file partsupp.tbl.1 as well. Using a more specific
       * pattern such as "part.tbl.*" will work. Another way is to use
       * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
       * </pre>
       *
       * <code>repeated string file_patterns = 2;</code>
       */
      java.util.List<java.lang.String>
          getFilePatternsList();
      /**
       * <pre>
       * Text files to be imported. These can be either file name or GLOB pattern.
       * File pattern will be expanded to include all matching files during
       * importing process.
       * (-- When using GLOB patterns in the files field, please make sure the
       * patterns match input files properly. For example, assuming input files
       * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
       * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
       * "partsupp*". However, table PART cannot use "part*", as it will
       * incorrectly match file partsupp.tbl.1 as well. Using a more specific
       * pattern such as "part.tbl.*" will work. Another way is to use
       * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
       * </pre>
       *
       * <code>repeated string file_patterns = 2;</code>
       */
      int getFilePatternsCount();
      /**
       * <pre>
       * Text files to be imported. These can be either file name or GLOB pattern.
       * File pattern will be expanded to include all matching files during
       * importing process.
       * (-- When using GLOB patterns in the files field, please make sure the
       * patterns match input files properly. For example, assuming input files
       * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
       * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
       * "partsupp*". However, table PART cannot use "part*", as it will
       * incorrectly match file partsupp.tbl.1 as well. Using a more specific
       * pattern such as "part.tbl.*" will work. Another way is to use
       * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
       * </pre>
       *
       * <code>repeated string file_patterns = 2;</code>
       */
      java.lang.String getFilePatterns(int index);
      /**
       * <pre>
       * Text files to be imported. These can be either file name or GLOB pattern.
       * File pattern will be expanded to include all matching files during
       * importing process.
       * (-- When using GLOB patterns in the files field, please make sure the
       * patterns match input files properly. For example, assuming input files
       * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
       * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
       * "partsupp*". However, table PART cannot use "part*", as it will
       * incorrectly match file partsupp.tbl.1 as well. Using a more specific
       * pattern such as "part.tbl.*" will work. Another way is to use
       * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
       * </pre>
       *
       * <code>repeated string file_patterns = 2;</code>
       */
      com.google.protobuf.ByteString
          getFilePatternsBytes(int index);

      /**
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
       */
      java.util.List<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column> 
          getColumnsList();
      /**
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
       */
      com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column getColumns(int index);
      /**
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
       */
      int getColumnsCount();
      /**
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
       */
      java.util.List<? extends com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.ColumnOrBuilder> 
          getColumnsOrBuilderList();
      /**
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
       */
      com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.ColumnOrBuilder getColumnsOrBuilder(
          int index);
    }
    /**
     * <pre>
     * The per-table import manifest.
     * </pre>
     *
     * Protobuf type {@code com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest}
     */
    public  static final class TableManifest extends
        com.google.protobuf.GeneratedMessageV3 implements
        // @@protoc_insertion_point(message_implements:com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest)
        TableManifestOrBuilder {
    private static final long serialVersionUID = 0L;
      // Use TableManifest.newBuilder() to construct.
      private TableManifest(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
        super(builder);
      }
      private TableManifest() {
        tableName_ = "";
        filePatterns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        columns_ = java.util.Collections.emptyList();
      }

      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
      getUnknownFields() {
        return this.unknownFields;
      }
      private TableManifest(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        this();
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownFieldProto3(
                    input, unknownFields, extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                java.lang.String s = input.readStringRequireUtf8();

                tableName_ = s;
                break;
              }
              case 18: {
                java.lang.String s = input.readStringRequireUtf8();
                if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                  filePatterns_ = new com.google.protobuf.LazyStringArrayList();
                  mutable_bitField0_ |= 0x00000002;
                }
                filePatterns_.add(s);
                break;
              }
              case 26: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  columns_ = new java.util.ArrayList<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column>();
                  mutable_bitField0_ |= 0x00000004;
                }
                columns_.add(
                    input.readMessage(com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.parser(), extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
            filePatterns_ = filePatterns_.getUnmodifiableView();
          }
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            columns_ = java.util.Collections.unmodifiableList(columns_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.class, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Builder.class);
      }

      public interface ColumnOrBuilder extends
          // @@protoc_insertion_point(interface_extends:com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column)
          com.google.protobuf.MessageOrBuilder {

        /**
         * <pre>
         * The name of the column of the destination table.
         * </pre>
         *
         * <code>string column_name = 1;</code>
         */
        java.lang.String getColumnName();
        /**
         * <pre>
         * The name of the column of the destination table.
         * </pre>
         *
         * <code>string column_name = 1;</code>
         */
        com.google.protobuf.ByteString
            getColumnNameBytes();

        /**
         * <pre>
         * The type of the column. Currently, the following datatypes are
         * supported: BOOL, INT64, FLOAT64, STRING, DATE, TIMESTAMP.
         * </pre>
         *
         * <code>string type_name = 2;</code>
         */
        java.lang.String getTypeName();
        /**
         * <pre>
         * The type of the column. Currently, the following datatypes are
         * supported: BOOL, INT64, FLOAT64, STRING, DATE, TIMESTAMP.
         * </pre>
         *
         * <code>string type_name = 2;</code>
         */
        com.google.protobuf.ByteString
            getTypeNameBytes();
      }
      /**
       * Protobuf type {@code com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column}
       */
      public  static final class Column extends
          com.google.protobuf.GeneratedMessageV3 implements
          // @@protoc_insertion_point(message_implements:com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column)
          ColumnOrBuilder {
      private static final long serialVersionUID = 0L;
        // Use Column.newBuilder() to construct.
        private Column(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
          super(builder);
        }
        private Column() {
          columnName_ = "";
          typeName_ = "";
        }

        @java.lang.Override
        public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
          return this.unknownFields;
        }
        private Column(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          this();
          if (extensionRegistry == null) {
            throw new java.lang.NullPointerException();
          }
          int mutable_bitField0_ = 0;
          com.google.protobuf.UnknownFieldSet.Builder unknownFields =
              com.google.protobuf.UnknownFieldSet.newBuilder();
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!parseUnknownFieldProto3(
                      input, unknownFields, extensionRegistry, tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  java.lang.String s = input.readStringRequireUtf8();

                  columnName_ = s;
                  break;
                }
                case 18: {
                  java.lang.String s = input.readStringRequireUtf8();

                  typeName_ = s;
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw e.setUnfinishedMessage(this);
          } catch (java.io.IOException e) {
            throw new com.google.protobuf.InvalidProtocolBufferException(
                e).setUnfinishedMessage(this);
          } finally {
            this.unknownFields = unknownFields.build();
            makeExtensionsImmutable();
          }
        }
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_Column_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_Column_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.class, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.Builder.class);
        }

        public static final int COLUMN_NAME_FIELD_NUMBER = 1;
        private volatile java.lang.Object columnName_;
        /**
         * <pre>
         * The name of the column of the destination table.
         * </pre>
         *
         * <code>string column_name = 1;</code>
         */
        public java.lang.String getColumnName() {
          java.lang.Object ref = columnName_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            columnName_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * The name of the column of the destination table.
         * </pre>
         *
         * <code>string column_name = 1;</code>
         */
        public com.google.protobuf.ByteString
            getColumnNameBytes() {
          java.lang.Object ref = columnName_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            columnName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        public static final int TYPE_NAME_FIELD_NUMBER = 2;
        private volatile java.lang.Object typeName_;
        /**
         * <pre>
         * The type of the column. Currently, the following datatypes are
         * supported: BOOL, INT64, FLOAT64, STRING, DATE, TIMESTAMP.
         * </pre>
         *
         * <code>string type_name = 2;</code>
         */
        public java.lang.String getTypeName() {
          java.lang.Object ref = typeName_;
          if (ref instanceof java.lang.String) {
            return (java.lang.String) ref;
          } else {
            com.google.protobuf.ByteString bs = 
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            typeName_ = s;
            return s;
          }
        }
        /**
         * <pre>
         * The type of the column. Currently, the following datatypes are
         * supported: BOOL, INT64, FLOAT64, STRING, DATE, TIMESTAMP.
         * </pre>
         *
         * <code>string type_name = 2;</code>
         */
        public com.google.protobuf.ByteString
            getTypeNameBytes() {
          java.lang.Object ref = typeName_;
          if (ref instanceof java.lang.String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            typeName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }

        private byte memoizedIsInitialized = -1;
        public final boolean isInitialized() {
          byte isInitialized = memoizedIsInitialized;
          if (isInitialized == 1) return true;
          if (isInitialized == 0) return false;

          memoizedIsInitialized = 1;
          return true;
        }

        public void writeTo(com.google.protobuf.CodedOutputStream output)
                            throws java.io.IOException {
          if (!getColumnNameBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 1, columnName_);
          }
          if (!getTypeNameBytes().isEmpty()) {
            com.google.protobuf.GeneratedMessageV3.writeString(output, 2, typeName_);
          }
          unknownFields.writeTo(output);
        }

        public int getSerializedSize() {
          int size = memoizedSize;
          if (size != -1) return size;

          size = 0;
          if (!getColumnNameBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, columnName_);
          }
          if (!getTypeNameBytes().isEmpty()) {
            size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, typeName_);
          }
          size += unknownFields.getSerializedSize();
          memoizedSize = size;
          return size;
        }

        @java.lang.Override
        public boolean equals(final java.lang.Object obj) {
          if (obj == this) {
           return true;
          }
          if (!(obj instanceof com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column)) {
            return super.equals(obj);
          }
          com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column other = (com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column) obj;

          boolean result = true;
          result = result && getColumnName()
              .equals(other.getColumnName());
          result = result && getTypeName()
              .equals(other.getTypeName());
          result = result && unknownFields.equals(other.unknownFields);
          return result;
        }

        @java.lang.Override
        public int hashCode() {
          if (memoizedHashCode != 0) {
            return memoizedHashCode;
          }
          int hash = 41;
          hash = (19 * hash) + getDescriptor().hashCode();
          hash = (37 * hash) + COLUMN_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getColumnName().hashCode();
          hash = (37 * hash) + TYPE_NAME_FIELD_NUMBER;
          hash = (53 * hash) + getTypeName().hashCode();
          hash = (29 * hash) + unknownFields.hashCode();
          memoizedHashCode = hash;
          return hash;
        }

        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parseFrom(
            java.nio.ByteBuffer data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parseFrom(
            java.nio.ByteBuffer data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parseFrom(
            com.google.protobuf.ByteString data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parseFrom(
            com.google.protobuf.ByteString data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parseFrom(byte[] data)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data);
        }
        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parseFrom(
            byte[] data,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return PARSER.parseFrom(data, extensionRegistry);
        }
        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parseFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parseFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }
        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parseDelimitedFrom(java.io.InputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input);
        }
        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parseDelimitedFrom(
            java.io.InputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
        }
        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parseFrom(
            com.google.protobuf.CodedInputStream input)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input);
        }
        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parseFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          return com.google.protobuf.GeneratedMessageV3
              .parseWithIOException(PARSER, input, extensionRegistry);
        }

        public Builder newBuilderForType() { return newBuilder(); }
        public static Builder newBuilder() {
          return DEFAULT_INSTANCE.toBuilder();
        }
        public static Builder newBuilder(com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column prototype) {
          return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
        }
        public Builder toBuilder() {
          return this == DEFAULT_INSTANCE
              ? new Builder() : new Builder().mergeFrom(this);
        }

        @java.lang.Override
        protected Builder newBuilderForType(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          Builder builder = new Builder(parent);
          return builder;
        }
        /**
         * Protobuf type {@code com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column}
         */
        public static final class Builder extends
            com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
            // @@protoc_insertion_point(builder_implements:com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column)
            com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.ColumnOrBuilder {
          public static final com.google.protobuf.Descriptors.Descriptor
              getDescriptor() {
            return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_Column_descriptor;
          }

          protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
              internalGetFieldAccessorTable() {
            return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_Column_fieldAccessorTable
                .ensureFieldAccessorsInitialized(
                    com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.class, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.Builder.class);
          }

          // Construct using com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.newBuilder()
          private Builder() {
            maybeForceBuilderInitialization();
          }

          private Builder(
              com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
            super(parent);
            maybeForceBuilderInitialization();
          }
          private void maybeForceBuilderInitialization() {
            if (com.google.protobuf.GeneratedMessageV3
                    .alwaysUseFieldBuilders) {
            }
          }
          public Builder clear() {
            super.clear();
            columnName_ = "";

            typeName_ = "";

            return this;
          }

          public com.google.protobuf.Descriptors.Descriptor
              getDescriptorForType() {
            return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_Column_descriptor;
          }

          public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column getDefaultInstanceForType() {
            return com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.getDefaultInstance();
          }

          public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column build() {
            com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column result = buildPartial();
            if (!result.isInitialized()) {
              throw newUninitializedMessageException(result);
            }
            return result;
          }

          public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column buildPartial() {
            com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column result = new com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column(this);
            result.columnName_ = columnName_;
            result.typeName_ = typeName_;
            onBuilt();
            return result;
          }

          public Builder clone() {
            return (Builder) super.clone();
          }
          public Builder setField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.setField(field, value);
          }
          public Builder clearField(
              com.google.protobuf.Descriptors.FieldDescriptor field) {
            return (Builder) super.clearField(field);
          }
          public Builder clearOneof(
              com.google.protobuf.Descriptors.OneofDescriptor oneof) {
            return (Builder) super.clearOneof(oneof);
          }
          public Builder setRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              int index, java.lang.Object value) {
            return (Builder) super.setRepeatedField(field, index, value);
          }
          public Builder addRepeatedField(
              com.google.protobuf.Descriptors.FieldDescriptor field,
              java.lang.Object value) {
            return (Builder) super.addRepeatedField(field, value);
          }
          public Builder mergeFrom(com.google.protobuf.Message other) {
            if (other instanceof com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column) {
              return mergeFrom((com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column)other);
            } else {
              super.mergeFrom(other);
              return this;
            }
          }

          public Builder mergeFrom(com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column other) {
            if (other == com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.getDefaultInstance()) return this;
            if (!other.getColumnName().isEmpty()) {
              columnName_ = other.columnName_;
              onChanged();
            }
            if (!other.getTypeName().isEmpty()) {
              typeName_ = other.typeName_;
              onChanged();
            }
            this.mergeUnknownFields(other.unknownFields);
            onChanged();
            return this;
          }

          public final boolean isInitialized() {
            return true;
          }

          public Builder mergeFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws java.io.IOException {
            com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column parsedMessage = null;
            try {
              parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
            } catch (com.google.protobuf.InvalidProtocolBufferException e) {
              parsedMessage = (com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column) e.getUnfinishedMessage();
              throw e.unwrapIOException();
            } finally {
              if (parsedMessage != null) {
                mergeFrom(parsedMessage);
              }
            }
            return this;
          }

          private java.lang.Object columnName_ = "";
          /**
           * <pre>
           * The name of the column of the destination table.
           * </pre>
           *
           * <code>string column_name = 1;</code>
           */
          public java.lang.String getColumnName() {
            java.lang.Object ref = columnName_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              columnName_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * The name of the column of the destination table.
           * </pre>
           *
           * <code>string column_name = 1;</code>
           */
          public com.google.protobuf.ByteString
              getColumnNameBytes() {
            java.lang.Object ref = columnName_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              columnName_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * The name of the column of the destination table.
           * </pre>
           *
           * <code>string column_name = 1;</code>
           */
          public Builder setColumnName(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            columnName_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * The name of the column of the destination table.
           * </pre>
           *
           * <code>string column_name = 1;</code>
           */
          public Builder clearColumnName() {
            
            columnName_ = getDefaultInstance().getColumnName();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * The name of the column of the destination table.
           * </pre>
           *
           * <code>string column_name = 1;</code>
           */
          public Builder setColumnNameBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            columnName_ = value;
            onChanged();
            return this;
          }

          private java.lang.Object typeName_ = "";
          /**
           * <pre>
           * The type of the column. Currently, the following datatypes are
           * supported: BOOL, INT64, FLOAT64, STRING, DATE, TIMESTAMP.
           * </pre>
           *
           * <code>string type_name = 2;</code>
           */
          public java.lang.String getTypeName() {
            java.lang.Object ref = typeName_;
            if (!(ref instanceof java.lang.String)) {
              com.google.protobuf.ByteString bs =
                  (com.google.protobuf.ByteString) ref;
              java.lang.String s = bs.toStringUtf8();
              typeName_ = s;
              return s;
            } else {
              return (java.lang.String) ref;
            }
          }
          /**
           * <pre>
           * The type of the column. Currently, the following datatypes are
           * supported: BOOL, INT64, FLOAT64, STRING, DATE, TIMESTAMP.
           * </pre>
           *
           * <code>string type_name = 2;</code>
           */
          public com.google.protobuf.ByteString
              getTypeNameBytes() {
            java.lang.Object ref = typeName_;
            if (ref instanceof String) {
              com.google.protobuf.ByteString b = 
                  com.google.protobuf.ByteString.copyFromUtf8(
                      (java.lang.String) ref);
              typeName_ = b;
              return b;
            } else {
              return (com.google.protobuf.ByteString) ref;
            }
          }
          /**
           * <pre>
           * The type of the column. Currently, the following datatypes are
           * supported: BOOL, INT64, FLOAT64, STRING, DATE, TIMESTAMP.
           * </pre>
           *
           * <code>string type_name = 2;</code>
           */
          public Builder setTypeName(
              java.lang.String value) {
            if (value == null) {
    throw new NullPointerException();
  }
  
            typeName_ = value;
            onChanged();
            return this;
          }
          /**
           * <pre>
           * The type of the column. Currently, the following datatypes are
           * supported: BOOL, INT64, FLOAT64, STRING, DATE, TIMESTAMP.
           * </pre>
           *
           * <code>string type_name = 2;</code>
           */
          public Builder clearTypeName() {
            
            typeName_ = getDefaultInstance().getTypeName();
            onChanged();
            return this;
          }
          /**
           * <pre>
           * The type of the column. Currently, the following datatypes are
           * supported: BOOL, INT64, FLOAT64, STRING, DATE, TIMESTAMP.
           * </pre>
           *
           * <code>string type_name = 2;</code>
           */
          public Builder setTypeNameBytes(
              com.google.protobuf.ByteString value) {
            if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
            
            typeName_ = value;
            onChanged();
            return this;
          }
          public final Builder setUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.setUnknownFieldsProto3(unknownFields);
          }

          public final Builder mergeUnknownFields(
              final com.google.protobuf.UnknownFieldSet unknownFields) {
            return super.mergeUnknownFields(unknownFields);
          }


          // @@protoc_insertion_point(builder_scope:com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column)
        }

        // @@protoc_insertion_point(class_scope:com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column)
        private static final com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column DEFAULT_INSTANCE;
        static {
          DEFAULT_INSTANCE = new com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column();
        }

        public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column getDefaultInstance() {
          return DEFAULT_INSTANCE;
        }

        private static final com.google.protobuf.Parser<Column>
            PARSER = new com.google.protobuf.AbstractParser<Column>() {
          public Column parsePartialFrom(
              com.google.protobuf.CodedInputStream input,
              com.google.protobuf.ExtensionRegistryLite extensionRegistry)
              throws com.google.protobuf.InvalidProtocolBufferException {
            return new Column(input, extensionRegistry);
          }
        };

        public static com.google.protobuf.Parser<Column> parser() {
          return PARSER;
        }

        @java.lang.Override
        public com.google.protobuf.Parser<Column> getParserForType() {
          return PARSER;
        }

        public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column getDefaultInstanceForType() {
          return DEFAULT_INSTANCE;
        }

      }

      private int bitField0_;
      public static final int TABLE_NAME_FIELD_NUMBER = 1;
      private volatile java.lang.Object tableName_;
      /**
       * <pre>
       * The name of the destination table.
       * </pre>
       *
       * <code>string table_name = 1;</code>
       */
      public java.lang.String getTableName() {
        java.lang.Object ref = tableName_;
        if (ref instanceof java.lang.String) {
          return (java.lang.String) ref;
        } else {
          com.google.protobuf.ByteString bs = 
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          tableName_ = s;
          return s;
        }
      }
      /**
       * <pre>
       * The name of the destination table.
       * </pre>
       *
       * <code>string table_name = 1;</code>
       */
      public com.google.protobuf.ByteString
          getTableNameBytes() {
        java.lang.Object ref = tableName_;
        if (ref instanceof java.lang.String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tableName_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }

      public static final int FILE_PATTERNS_FIELD_NUMBER = 2;
      private com.google.protobuf.LazyStringList filePatterns_;
      /**
       * <pre>
       * Text files to be imported. These can be either file name or GLOB pattern.
       * File pattern will be expanded to include all matching files during
       * importing process.
       * (-- When using GLOB patterns in the files field, please make sure the
       * patterns match input files properly. For example, assuming input files
       * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
       * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
       * "partsupp*". However, table PART cannot use "part*", as it will
       * incorrectly match file partsupp.tbl.1 as well. Using a more specific
       * pattern such as "part.tbl.*" will work. Another way is to use
       * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
       * </pre>
       *
       * <code>repeated string file_patterns = 2;</code>
       */
      public com.google.protobuf.ProtocolStringList
          getFilePatternsList() {
        return filePatterns_;
      }
      /**
       * <pre>
       * Text files to be imported. These can be either file name or GLOB pattern.
       * File pattern will be expanded to include all matching files during
       * importing process.
       * (-- When using GLOB patterns in the files field, please make sure the
       * patterns match input files properly. For example, assuming input files
       * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
       * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
       * "partsupp*". However, table PART cannot use "part*", as it will
       * incorrectly match file partsupp.tbl.1 as well. Using a more specific
       * pattern such as "part.tbl.*" will work. Another way is to use
       * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
       * </pre>
       *
       * <code>repeated string file_patterns = 2;</code>
       */
      public int getFilePatternsCount() {
        return filePatterns_.size();
      }
      /**
       * <pre>
       * Text files to be imported. These can be either file name or GLOB pattern.
       * File pattern will be expanded to include all matching files during
       * importing process.
       * (-- When using GLOB patterns in the files field, please make sure the
       * patterns match input files properly. For example, assuming input files
       * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
       * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
       * "partsupp*". However, table PART cannot use "part*", as it will
       * incorrectly match file partsupp.tbl.1 as well. Using a more specific
       * pattern such as "part.tbl.*" will work. Another way is to use
       * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
       * </pre>
       *
       * <code>repeated string file_patterns = 2;</code>
       */
      public java.lang.String getFilePatterns(int index) {
        return filePatterns_.get(index);
      }
      /**
       * <pre>
       * Text files to be imported. These can be either file name or GLOB pattern.
       * File pattern will be expanded to include all matching files during
       * importing process.
       * (-- When using GLOB patterns in the files field, please make sure the
       * patterns match input files properly. For example, assuming input files
       * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
       * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
       * "partsupp*". However, table PART cannot use "part*", as it will
       * incorrectly match file partsupp.tbl.1 as well. Using a more specific
       * pattern such as "part.tbl.*" will work. Another way is to use
       * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
       * </pre>
       *
       * <code>repeated string file_patterns = 2;</code>
       */
      public com.google.protobuf.ByteString
          getFilePatternsBytes(int index) {
        return filePatterns_.getByteString(index);
      }

      public static final int COLUMNS_FIELD_NUMBER = 3;
      private java.util.List<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column> columns_;
      /**
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
       */
      public java.util.List<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column> getColumnsList() {
        return columns_;
      }
      /**
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
       */
      public java.util.List<? extends com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.ColumnOrBuilder> 
          getColumnsOrBuilderList() {
        return columns_;
      }
      /**
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
       */
      public int getColumnsCount() {
        return columns_.size();
      }
      /**
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
       */
      public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column getColumns(int index) {
        return columns_.get(index);
      }
      /**
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
       */
      public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.ColumnOrBuilder getColumnsOrBuilder(
          int index) {
        return columns_.get(index);
      }

      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        if (!getTableNameBytes().isEmpty()) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tableName_);
        }
        for (int i = 0; i < filePatterns_.size(); i++) {
          com.google.protobuf.GeneratedMessageV3.writeString(output, 2, filePatterns_.getRaw(i));
        }
        for (int i = 0; i < columns_.size(); i++) {
          output.writeMessage(3, columns_.get(i));
        }
        unknownFields.writeTo(output);
      }

      public int getSerializedSize() {
        int size = memoizedSize;
        if (size != -1) return size;

        size = 0;
        if (!getTableNameBytes().isEmpty()) {
          size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, tableName_);
        }
        {
          int dataSize = 0;
          for (int i = 0; i < filePatterns_.size(); i++) {
            dataSize += computeStringSizeNoTag(filePatterns_.getRaw(i));
          }
          size += dataSize;
          size += 1 * getFilePatternsList().size();
        }
        for (int i = 0; i < columns_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, columns_.get(i));
        }
        size += unknownFields.getSerializedSize();
        memoizedSize = size;
        return size;
      }

      @java.lang.Override
      public boolean equals(final java.lang.Object obj) {
        if (obj == this) {
         return true;
        }
        if (!(obj instanceof com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest)) {
          return super.equals(obj);
        }
        com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest other = (com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest) obj;

        boolean result = true;
        result = result && getTableName()
            .equals(other.getTableName());
        result = result && getFilePatternsList()
            .equals(other.getFilePatternsList());
        result = result && getColumnsList()
            .equals(other.getColumnsList());
        result = result && unknownFields.equals(other.unknownFields);
        return result;
      }

      @java.lang.Override
      public int hashCode() {
        if (memoizedHashCode != 0) {
          return memoizedHashCode;
        }
        int hash = 41;
        hash = (19 * hash) + getDescriptor().hashCode();
        hash = (37 * hash) + TABLE_NAME_FIELD_NUMBER;
        hash = (53 * hash) + getTableName().hashCode();
        if (getFilePatternsCount() > 0) {
          hash = (37 * hash) + FILE_PATTERNS_FIELD_NUMBER;
          hash = (53 * hash) + getFilePatternsList().hashCode();
        }
        if (getColumnsCount() > 0) {
          hash = (37 * hash) + COLUMNS_FIELD_NUMBER;
          hash = (53 * hash) + getColumnsList().hashCode();
        }
        hash = (29 * hash) + unknownFields.hashCode();
        memoizedHashCode = hash;
        return hash;
      }

      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parseFrom(
          java.nio.ByteBuffer data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parseFrom(
          java.nio.ByteBuffer data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input);
      }
      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
      }
      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input);
      }
      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return com.google.protobuf.GeneratedMessageV3
            .parseWithIOException(PARSER, input, extensionRegistry);
      }

      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder() {
        return DEFAULT_INSTANCE.toBuilder();
      }
      public static Builder newBuilder(com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest prototype) {
        return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() {
        return this == DEFAULT_INSTANCE
            ? new Builder() : new Builder().mergeFrom(this);
      }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * <pre>
       * The per-table import manifest.
       * </pre>
       *
       * Protobuf type {@code com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest)
          com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifestOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_descriptor;
        }

        protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.class, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Builder.class);
        }

        // Construct using com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessageV3
                  .alwaysUseFieldBuilders) {
            getColumnsFieldBuilder();
          }
        }
        public Builder clear() {
          super.clear();
          tableName_ = "";

          filePatterns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000002);
          if (columnsBuilder_ == null) {
            columns_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            columnsBuilder_.clear();
          }
          return this;
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_descriptor;
        }

        public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest getDefaultInstanceForType() {
          return com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.getDefaultInstance();
        }

        public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest build() {
          com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest buildPartial() {
          com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest result = new com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          result.tableName_ = tableName_;
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            filePatterns_ = filePatterns_.getUnmodifiableView();
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.filePatterns_ = filePatterns_;
          if (columnsBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
              columns_ = java.util.Collections.unmodifiableList(columns_);
              bitField0_ = (bitField0_ & ~0x00000004);
            }
            result.columns_ = columns_;
          } else {
            result.columns_ = columnsBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder clone() {
          return (Builder) super.clone();
        }
        public Builder setField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.setField(field, value);
        }
        public Builder clearField(
            com.google.protobuf.Descriptors.FieldDescriptor field) {
          return (Builder) super.clearField(field);
        }
        public Builder clearOneof(
            com.google.protobuf.Descriptors.OneofDescriptor oneof) {
          return (Builder) super.clearOneof(oneof);
        }
        public Builder setRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            int index, java.lang.Object value) {
          return (Builder) super.setRepeatedField(field, index, value);
        }
        public Builder addRepeatedField(
            com.google.protobuf.Descriptors.FieldDescriptor field,
            java.lang.Object value) {
          return (Builder) super.addRepeatedField(field, value);
        }
        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest) {
            return mergeFrom((com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest other) {
          if (other == com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.getDefaultInstance()) return this;
          if (!other.getTableName().isEmpty()) {
            tableName_ = other.tableName_;
            onChanged();
          }
          if (!other.filePatterns_.isEmpty()) {
            if (filePatterns_.isEmpty()) {
              filePatterns_ = other.filePatterns_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureFilePatternsIsMutable();
              filePatterns_.addAll(other.filePatterns_);
            }
            onChanged();
          }
          if (columnsBuilder_ == null) {
            if (!other.columns_.isEmpty()) {
              if (columns_.isEmpty()) {
                columns_ = other.columns_;
                bitField0_ = (bitField0_ & ~0x00000004);
              } else {
                ensureColumnsIsMutable();
                columns_.addAll(other.columns_);
              }
              onChanged();
            }
          } else {
            if (!other.columns_.isEmpty()) {
              if (columnsBuilder_.isEmpty()) {
                columnsBuilder_.dispose();
                columnsBuilder_ = null;
                columns_ = other.columns_;
                bitField0_ = (bitField0_ & ~0x00000004);
                columnsBuilder_ = 
                  com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                     getColumnsFieldBuilder() : null;
              } else {
                columnsBuilder_.addAllMessages(other.columns_);
              }
            }
          }
          this.mergeUnknownFields(other.unknownFields);
          onChanged();
          return this;
        }

        public final boolean isInitialized() {
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest) e.getUnfinishedMessage();
            throw e.unwrapIOException();
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private java.lang.Object tableName_ = "";
        /**
         * <pre>
         * The name of the destination table.
         * </pre>
         *
         * <code>string table_name = 1;</code>
         */
        public java.lang.String getTableName() {
          java.lang.Object ref = tableName_;
          if (!(ref instanceof java.lang.String)) {
            com.google.protobuf.ByteString bs =
                (com.google.protobuf.ByteString) ref;
            java.lang.String s = bs.toStringUtf8();
            tableName_ = s;
            return s;
          } else {
            return (java.lang.String) ref;
          }
        }
        /**
         * <pre>
         * The name of the destination table.
         * </pre>
         *
         * <code>string table_name = 1;</code>
         */
        public com.google.protobuf.ByteString
            getTableNameBytes() {
          java.lang.Object ref = tableName_;
          if (ref instanceof String) {
            com.google.protobuf.ByteString b = 
                com.google.protobuf.ByteString.copyFromUtf8(
                    (java.lang.String) ref);
            tableName_ = b;
            return b;
          } else {
            return (com.google.protobuf.ByteString) ref;
          }
        }
        /**
         * <pre>
         * The name of the destination table.
         * </pre>
         *
         * <code>string table_name = 1;</code>
         */
        public Builder setTableName(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  
          tableName_ = value;
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The name of the destination table.
         * </pre>
         *
         * <code>string table_name = 1;</code>
         */
        public Builder clearTableName() {
          
          tableName_ = getDefaultInstance().getTableName();
          onChanged();
          return this;
        }
        /**
         * <pre>
         * The name of the destination table.
         * </pre>
         *
         * <code>string table_name = 1;</code>
         */
        public Builder setTableNameBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          
          tableName_ = value;
          onChanged();
          return this;
        }

        private com.google.protobuf.LazyStringList filePatterns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        private void ensureFilePatternsIsMutable() {
          if (!((bitField0_ & 0x00000002) == 0x00000002)) {
            filePatterns_ = new com.google.protobuf.LazyStringArrayList(filePatterns_);
            bitField0_ |= 0x00000002;
           }
        }
        /**
         * <pre>
         * Text files to be imported. These can be either file name or GLOB pattern.
         * File pattern will be expanded to include all matching files during
         * importing process.
         * (-- When using GLOB patterns in the files field, please make sure the
         * patterns match input files properly. For example, assuming input files
         * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
         * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
         * "partsupp*". However, table PART cannot use "part*", as it will
         * incorrectly match file partsupp.tbl.1 as well. Using a more specific
         * pattern such as "part.tbl.*" will work. Another way is to use
         * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
         * </pre>
         *
         * <code>repeated string file_patterns = 2;</code>
         */
        public com.google.protobuf.ProtocolStringList
            getFilePatternsList() {
          return filePatterns_.getUnmodifiableView();
        }
        /**
         * <pre>
         * Text files to be imported. These can be either file name or GLOB pattern.
         * File pattern will be expanded to include all matching files during
         * importing process.
         * (-- When using GLOB patterns in the files field, please make sure the
         * patterns match input files properly. For example, assuming input files
         * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
         * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
         * "partsupp*". However, table PART cannot use "part*", as it will
         * incorrectly match file partsupp.tbl.1 as well. Using a more specific
         * pattern such as "part.tbl.*" will work. Another way is to use
         * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
         * </pre>
         *
         * <code>repeated string file_patterns = 2;</code>
         */
        public int getFilePatternsCount() {
          return filePatterns_.size();
        }
        /**
         * <pre>
         * Text files to be imported. These can be either file name or GLOB pattern.
         * File pattern will be expanded to include all matching files during
         * importing process.
         * (-- When using GLOB patterns in the files field, please make sure the
         * patterns match input files properly. For example, assuming input files
         * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
         * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
         * "partsupp*". However, table PART cannot use "part*", as it will
         * incorrectly match file partsupp.tbl.1 as well. Using a more specific
         * pattern such as "part.tbl.*" will work. Another way is to use
         * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
         * </pre>
         *
         * <code>repeated string file_patterns = 2;</code>
         */
        public java.lang.String getFilePatterns(int index) {
          return filePatterns_.get(index);
        }
        /**
         * <pre>
         * Text files to be imported. These can be either file name or GLOB pattern.
         * File pattern will be expanded to include all matching files during
         * importing process.
         * (-- When using GLOB patterns in the files field, please make sure the
         * patterns match input files properly. For example, assuming input files
         * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
         * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
         * "partsupp*". However, table PART cannot use "part*", as it will
         * incorrectly match file partsupp.tbl.1 as well. Using a more specific
         * pattern such as "part.tbl.*" will work. Another way is to use
         * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
         * </pre>
         *
         * <code>repeated string file_patterns = 2;</code>
         */
        public com.google.protobuf.ByteString
            getFilePatternsBytes(int index) {
          return filePatterns_.getByteString(index);
        }
        /**
         * <pre>
         * Text files to be imported. These can be either file name or GLOB pattern.
         * File pattern will be expanded to include all matching files during
         * importing process.
         * (-- When using GLOB patterns in the files field, please make sure the
         * patterns match input files properly. For example, assuming input files
         * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
         * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
         * "partsupp*". However, table PART cannot use "part*", as it will
         * incorrectly match file partsupp.tbl.1 as well. Using a more specific
         * pattern such as "part.tbl.*" will work. Another way is to use
         * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
         * </pre>
         *
         * <code>repeated string file_patterns = 2;</code>
         */
        public Builder setFilePatterns(
            int index, java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureFilePatternsIsMutable();
          filePatterns_.set(index, value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Text files to be imported. These can be either file name or GLOB pattern.
         * File pattern will be expanded to include all matching files during
         * importing process.
         * (-- When using GLOB patterns in the files field, please make sure the
         * patterns match input files properly. For example, assuming input files
         * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
         * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
         * "partsupp*". However, table PART cannot use "part*", as it will
         * incorrectly match file partsupp.tbl.1 as well. Using a more specific
         * pattern such as "part.tbl.*" will work. Another way is to use
         * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
         * </pre>
         *
         * <code>repeated string file_patterns = 2;</code>
         */
        public Builder addFilePatterns(
            java.lang.String value) {
          if (value == null) {
    throw new NullPointerException();
  }
  ensureFilePatternsIsMutable();
          filePatterns_.add(value);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Text files to be imported. These can be either file name or GLOB pattern.
         * File pattern will be expanded to include all matching files during
         * importing process.
         * (-- When using GLOB patterns in the files field, please make sure the
         * patterns match input files properly. For example, assuming input files
         * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
         * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
         * "partsupp*". However, table PART cannot use "part*", as it will
         * incorrectly match file partsupp.tbl.1 as well. Using a more specific
         * pattern such as "part.tbl.*" will work. Another way is to use
         * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
         * </pre>
         *
         * <code>repeated string file_patterns = 2;</code>
         */
        public Builder addAllFilePatterns(
            java.lang.Iterable<java.lang.String> values) {
          ensureFilePatternsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, filePatterns_);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Text files to be imported. These can be either file name or GLOB pattern.
         * File pattern will be expanded to include all matching files during
         * importing process.
         * (-- When using GLOB patterns in the files field, please make sure the
         * patterns match input files properly. For example, assuming input files
         * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
         * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
         * "partsupp*". However, table PART cannot use "part*", as it will
         * incorrectly match file partsupp.tbl.1 as well. Using a more specific
         * pattern such as "part.tbl.*" will work. Another way is to use
         * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
         * </pre>
         *
         * <code>repeated string file_patterns = 2;</code>
         */
        public Builder clearFilePatterns() {
          filePatterns_ = com.google.protobuf.LazyStringArrayList.EMPTY;
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
          return this;
        }
        /**
         * <pre>
         * Text files to be imported. These can be either file name or GLOB pattern.
         * File pattern will be expanded to include all matching files during
         * importing process.
         * (-- When using GLOB patterns in the files field, please make sure the
         * patterns match input files properly. For example, assuming input files
         * include part.tbl.1 and part.tbl.2 for table PART, partsupp.tbl.1 and
         * partsupp.tbl.2 for table PARTSUPP. Table PARTSUPP can use pattern
         * "partsupp*". However, table PART cannot use "part*", as it will
         * incorrectly match file partsupp.tbl.1 as well. Using a more specific
         * pattern such as "part.tbl.*" will work. Another way is to use
         * "part.tbl*" and "partsupp.tbl*" for PART and PARTSUPP, respectively.--)
         * </pre>
         *
         * <code>repeated string file_patterns = 2;</code>
         */
        public Builder addFilePatternsBytes(
            com.google.protobuf.ByteString value) {
          if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
          ensureFilePatternsIsMutable();
          filePatterns_.add(value);
          onChanged();
          return this;
        }

        private java.util.List<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column> columns_ =
          java.util.Collections.emptyList();
        private void ensureColumnsIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            columns_ = new java.util.ArrayList<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column>(columns_);
            bitField0_ |= 0x00000004;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.Builder, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.ColumnOrBuilder> columnsBuilder_;

        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public java.util.List<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column> getColumnsList() {
          if (columnsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(columns_);
          } else {
            return columnsBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public int getColumnsCount() {
          if (columnsBuilder_ == null) {
            return columns_.size();
          } else {
            return columnsBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column getColumns(int index) {
          if (columnsBuilder_ == null) {
            return columns_.get(index);
          } else {
            return columnsBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public Builder setColumns(
            int index, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column value) {
          if (columnsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureColumnsIsMutable();
            columns_.set(index, value);
            onChanged();
          } else {
            columnsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public Builder setColumns(
            int index, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.Builder builderForValue) {
          if (columnsBuilder_ == null) {
            ensureColumnsIsMutable();
            columns_.set(index, builderForValue.build());
            onChanged();
          } else {
            columnsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public Builder addColumns(com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column value) {
          if (columnsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureColumnsIsMutable();
            columns_.add(value);
            onChanged();
          } else {
            columnsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public Builder addColumns(
            int index, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column value) {
          if (columnsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureColumnsIsMutable();
            columns_.add(index, value);
            onChanged();
          } else {
            columnsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public Builder addColumns(
            com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.Builder builderForValue) {
          if (columnsBuilder_ == null) {
            ensureColumnsIsMutable();
            columns_.add(builderForValue.build());
            onChanged();
          } else {
            columnsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public Builder addColumns(
            int index, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.Builder builderForValue) {
          if (columnsBuilder_ == null) {
            ensureColumnsIsMutable();
            columns_.add(index, builderForValue.build());
            onChanged();
          } else {
            columnsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public Builder addAllColumns(
            java.lang.Iterable<? extends com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column> values) {
          if (columnsBuilder_ == null) {
            ensureColumnsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, columns_);
            onChanged();
          } else {
            columnsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public Builder clearColumns() {
          if (columnsBuilder_ == null) {
            columns_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
            onChanged();
          } else {
            columnsBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public Builder removeColumns(int index) {
          if (columnsBuilder_ == null) {
            ensureColumnsIsMutable();
            columns_.remove(index);
            onChanged();
          } else {
            columnsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.Builder getColumnsBuilder(
            int index) {
          return getColumnsFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.ColumnOrBuilder getColumnsOrBuilder(
            int index) {
          if (columnsBuilder_ == null) {
            return columns_.get(index);  } else {
            return columnsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public java.util.List<? extends com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.ColumnOrBuilder> 
             getColumnsOrBuilderList() {
          if (columnsBuilder_ != null) {
            return columnsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(columns_);
          }
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.Builder addColumnsBuilder() {
          return getColumnsFieldBuilder().addBuilder(
              com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.getDefaultInstance());
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.Builder addColumnsBuilder(
            int index) {
          return getColumnsFieldBuilder().addBuilder(
              index, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.getDefaultInstance());
        }
        /**
         * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest.Column columns = 3;</code>
         */
        public java.util.List<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.Builder> 
             getColumnsBuilderList() {
          return getColumnsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilderV3<
            com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.Builder, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.ColumnOrBuilder> 
            getColumnsFieldBuilder() {
          if (columnsBuilder_ == null) {
            columnsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
                com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Column.Builder, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.ColumnOrBuilder>(
                    columns_,
                    ((bitField0_ & 0x00000004) == 0x00000004),
                    getParentForChildren(),
                    isClean());
            columns_ = null;
          }
          return columnsBuilder_;
        }
        public final Builder setUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.setUnknownFieldsProto3(unknownFields);
        }

        public final Builder mergeUnknownFields(
            final com.google.protobuf.UnknownFieldSet unknownFields) {
          return super.mergeUnknownFields(unknownFields);
        }


        // @@protoc_insertion_point(builder_scope:com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest)
      }

      // @@protoc_insertion_point(class_scope:com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest)
      private static final com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest DEFAULT_INSTANCE;
      static {
        DEFAULT_INSTANCE = new com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest();
      }

      public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest getDefaultInstance() {
        return DEFAULT_INSTANCE;
      }

      private static final com.google.protobuf.Parser<TableManifest>
          PARSER = new com.google.protobuf.AbstractParser<TableManifest>() {
        public TableManifest parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new TableManifest(input, extensionRegistry);
        }
      };

      public static com.google.protobuf.Parser<TableManifest> parser() {
        return PARSER;
      }

      @java.lang.Override
      public com.google.protobuf.Parser<TableManifest> getParserForType() {
        return PARSER;
      }

      public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest getDefaultInstanceForType() {
        return DEFAULT_INSTANCE;
      }

    }

    private int bitField0_;
    public static final int TABLES_FIELD_NUMBER = 1;
    private java.util.List<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest> tables_;
    /**
     * <pre>
     * The TableManifest of the tables to be imported.
     * </pre>
     *
     * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
     */
    public java.util.List<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest> getTablesList() {
      return tables_;
    }
    /**
     * <pre>
     * The TableManifest of the tables to be imported.
     * </pre>
     *
     * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
     */
    public java.util.List<? extends com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifestOrBuilder> 
        getTablesOrBuilderList() {
      return tables_;
    }
    /**
     * <pre>
     * The TableManifest of the tables to be imported.
     * </pre>
     *
     * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
     */
    public int getTablesCount() {
      return tables_.size();
    }
    /**
     * <pre>
     * The TableManifest of the tables to be imported.
     * </pre>
     *
     * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
     */
    public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest getTables(int index) {
      return tables_.get(index);
    }
    /**
     * <pre>
     * The TableManifest of the tables to be imported.
     * </pre>
     *
     * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
     */
    public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifestOrBuilder getTablesOrBuilder(
        int index) {
      return tables_.get(index);
    }

    public static final int DIALECT_FIELD_NUMBER = 2;
    private int dialect_;
    /**
     * <pre>
     * The dialect of the database to be imported.
     * </pre>
     *
     * <code>.com.google.cloud.teleport.spanner.proto.ProtoDialect dialect = 2;</code>
     */
    public int getDialectValue() {
      return dialect_;
    }
    /**
     * <pre>
     * The dialect of the database to be imported.
     * </pre>
     *
     * <code>.com.google.cloud.teleport.spanner.proto.ProtoDialect dialect = 2;</code>
     */
    public com.google.cloud.teleport.spanner.proto.ExportProtos.ProtoDialect getDialect() {
      com.google.cloud.teleport.spanner.proto.ExportProtos.ProtoDialect result = com.google.cloud.teleport.spanner.proto.ExportProtos.ProtoDialect.valueOf(dialect_);
      return result == null ? com.google.cloud.teleport.spanner.proto.ExportProtos.ProtoDialect.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < tables_.size(); i++) {
        output.writeMessage(1, tables_.get(i));
      }
      if (dialect_ != com.google.cloud.teleport.spanner.proto.ExportProtos.ProtoDialect.GOOGLE_STANDARD_SQL.getNumber()) {
        output.writeEnum(2, dialect_);
      }
      unknownFields.writeTo(output);
    }

    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < tables_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, tables_.get(i));
      }
      if (dialect_ != com.google.cloud.teleport.spanner.proto.ExportProtos.ProtoDialect.GOOGLE_STANDARD_SQL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, dialect_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest)) {
        return super.equals(obj);
      }
      com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest other = (com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest) obj;

      boolean result = true;
      result = result && getTablesList()
          .equals(other.getTablesList());
      result = result && dialect_ == other.dialect_;
      result = result && unknownFields.equals(other.unknownFields);
      return result;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (getTablesCount() > 0) {
        hash = (37 * hash) + TABLES_FIELD_NUMBER;
        hash = (53 * hash) + getTablesList().hashCode();
      }
      hash = (37 * hash) + DIALECT_FIELD_NUMBER;
      hash = (53 * hash) + dialect_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Protobuf of the import manifest, consisting of a list of TableManifest.
     * </pre>
     *
     * Protobuf type {@code com.google.cloud.teleport.spanner.proto.ImportManifest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:com.google.cloud.teleport.spanner.proto.ImportManifest)
        com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.class, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.Builder.class);
      }

      // Construct using com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
          getTablesFieldBuilder();
        }
      }
      public Builder clear() {
        super.clear();
        if (tablesBuilder_ == null) {
          tables_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          tablesBuilder_.clear();
        }
        dialect_ = 0;

        return this;
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.google.cloud.teleport.spanner.proto.TextImportProtos.internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_descriptor;
      }

      public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest getDefaultInstanceForType() {
        return com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.getDefaultInstance();
      }

      public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest build() {
        com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest buildPartial() {
        com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest result = new com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (tablesBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            tables_ = java.util.Collections.unmodifiableList(tables_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.tables_ = tables_;
        } else {
          result.tables_ = tablesBuilder_.build();
        }
        result.dialect_ = dialect_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder clone() {
        return (Builder) super.clone();
      }
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.setField(field, value);
      }
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return (Builder) super.clearField(field);
      }
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return (Builder) super.clearOneof(oneof);
      }
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return (Builder) super.setRepeatedField(field, index, value);
      }
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return (Builder) super.addRepeatedField(field, value);
      }
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest) {
          return mergeFrom((com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest other) {
        if (other == com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.getDefaultInstance()) return this;
        if (tablesBuilder_ == null) {
          if (!other.tables_.isEmpty()) {
            if (tables_.isEmpty()) {
              tables_ = other.tables_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTablesIsMutable();
              tables_.addAll(other.tables_);
            }
            onChanged();
          }
        } else {
          if (!other.tables_.isEmpty()) {
            if (tablesBuilder_.isEmpty()) {
              tablesBuilder_.dispose();
              tablesBuilder_ = null;
              tables_ = other.tables_;
              bitField0_ = (bitField0_ & ~0x00000001);
              tablesBuilder_ = 
                com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                   getTablesFieldBuilder() : null;
            } else {
              tablesBuilder_.addAllMessages(other.tables_);
            }
          }
        }
        if (other.dialect_ != 0) {
          setDialectValue(other.getDialectValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private java.util.List<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest> tables_ =
        java.util.Collections.emptyList();
      private void ensureTablesIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          tables_ = new java.util.ArrayList<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest>(tables_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Builder, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifestOrBuilder> tablesBuilder_;

      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public java.util.List<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest> getTablesList() {
        if (tablesBuilder_ == null) {
          return java.util.Collections.unmodifiableList(tables_);
        } else {
          return tablesBuilder_.getMessageList();
        }
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public int getTablesCount() {
        if (tablesBuilder_ == null) {
          return tables_.size();
        } else {
          return tablesBuilder_.getCount();
        }
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest getTables(int index) {
        if (tablesBuilder_ == null) {
          return tables_.get(index);
        } else {
          return tablesBuilder_.getMessage(index);
        }
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public Builder setTables(
          int index, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest value) {
        if (tablesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTablesIsMutable();
          tables_.set(index, value);
          onChanged();
        } else {
          tablesBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public Builder setTables(
          int index, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Builder builderForValue) {
        if (tablesBuilder_ == null) {
          ensureTablesIsMutable();
          tables_.set(index, builderForValue.build());
          onChanged();
        } else {
          tablesBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public Builder addTables(com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest value) {
        if (tablesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTablesIsMutable();
          tables_.add(value);
          onChanged();
        } else {
          tablesBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public Builder addTables(
          int index, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest value) {
        if (tablesBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTablesIsMutable();
          tables_.add(index, value);
          onChanged();
        } else {
          tablesBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public Builder addTables(
          com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Builder builderForValue) {
        if (tablesBuilder_ == null) {
          ensureTablesIsMutable();
          tables_.add(builderForValue.build());
          onChanged();
        } else {
          tablesBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public Builder addTables(
          int index, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Builder builderForValue) {
        if (tablesBuilder_ == null) {
          ensureTablesIsMutable();
          tables_.add(index, builderForValue.build());
          onChanged();
        } else {
          tablesBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public Builder addAllTables(
          java.lang.Iterable<? extends com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest> values) {
        if (tablesBuilder_ == null) {
          ensureTablesIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, tables_);
          onChanged();
        } else {
          tablesBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public Builder clearTables() {
        if (tablesBuilder_ == null) {
          tables_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          tablesBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public Builder removeTables(int index) {
        if (tablesBuilder_ == null) {
          ensureTablesIsMutable();
          tables_.remove(index);
          onChanged();
        } else {
          tablesBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Builder getTablesBuilder(
          int index) {
        return getTablesFieldBuilder().getBuilder(index);
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifestOrBuilder getTablesOrBuilder(
          int index) {
        if (tablesBuilder_ == null) {
          return tables_.get(index);  } else {
          return tablesBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public java.util.List<? extends com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifestOrBuilder> 
           getTablesOrBuilderList() {
        if (tablesBuilder_ != null) {
          return tablesBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(tables_);
        }
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Builder addTablesBuilder() {
        return getTablesFieldBuilder().addBuilder(
            com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.getDefaultInstance());
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Builder addTablesBuilder(
          int index) {
        return getTablesFieldBuilder().addBuilder(
            index, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.getDefaultInstance());
      }
      /**
       * <pre>
       * The TableManifest of the tables to be imported.
       * </pre>
       *
       * <code>repeated .com.google.cloud.teleport.spanner.proto.ImportManifest.TableManifest tables = 1;</code>
       */
      public java.util.List<com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Builder> 
           getTablesBuilderList() {
        return getTablesFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilderV3<
          com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Builder, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifestOrBuilder> 
          getTablesFieldBuilder() {
        if (tablesBuilder_ == null) {
          tablesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
              com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifest.Builder, com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest.TableManifestOrBuilder>(
                  tables_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          tables_ = null;
        }
        return tablesBuilder_;
      }

      private int dialect_ = 0;
      /**
       * <pre>
       * The dialect of the database to be imported.
       * </pre>
       *
       * <code>.com.google.cloud.teleport.spanner.proto.ProtoDialect dialect = 2;</code>
       */
      public int getDialectValue() {
        return dialect_;
      }
      /**
       * <pre>
       * The dialect of the database to be imported.
       * </pre>
       *
       * <code>.com.google.cloud.teleport.spanner.proto.ProtoDialect dialect = 2;</code>
       */
      public Builder setDialectValue(int value) {
        dialect_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The dialect of the database to be imported.
       * </pre>
       *
       * <code>.com.google.cloud.teleport.spanner.proto.ProtoDialect dialect = 2;</code>
       */
      public com.google.cloud.teleport.spanner.proto.ExportProtos.ProtoDialect getDialect() {
        com.google.cloud.teleport.spanner.proto.ExportProtos.ProtoDialect result = com.google.cloud.teleport.spanner.proto.ExportProtos.ProtoDialect.valueOf(dialect_);
        return result == null ? com.google.cloud.teleport.spanner.proto.ExportProtos.ProtoDialect.UNRECOGNIZED : result;
      }
      /**
       * <pre>
       * The dialect of the database to be imported.
       * </pre>
       *
       * <code>.com.google.cloud.teleport.spanner.proto.ProtoDialect dialect = 2;</code>
       */
      public Builder setDialect(com.google.cloud.teleport.spanner.proto.ExportProtos.ProtoDialect value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        dialect_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The dialect of the database to be imported.
       * </pre>
       *
       * <code>.com.google.cloud.teleport.spanner.proto.ProtoDialect dialect = 2;</code>
       */
      public Builder clearDialect() {
        
        dialect_ = 0;
        onChanged();
        return this;
      }
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFieldsProto3(unknownFields);
      }

      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:com.google.cloud.teleport.spanner.proto.ImportManifest)
    }

    // @@protoc_insertion_point(class_scope:com.google.cloud.teleport.spanner.proto.ImportManifest)
    private static final com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest();
    }

    public static com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<ImportManifest>
        PARSER = new com.google.protobuf.AbstractParser<ImportManifest>() {
      public ImportManifest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ImportManifest(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<ImportManifest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<ImportManifest> getParserForType() {
      return PARSER;
    }

    public com.google.cloud.teleport.spanner.proto.TextImportProtos.ImportManifest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_Column_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_Column_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\021text_import.proto\022\'com.google.cloud.te" +
      "leport.spanner.proto\032\014export.proto\"\375\002\n\016I" +
      "mportManifest\022U\n\006tables\030\001 \003(\0132E.com.goog" +
      "le.cloud.teleport.spanner.proto.ImportMa" +
      "nifest.TableManifest\022F\n\007dialect\030\002 \001(\01625." +
      "com.google.cloud.teleport.spanner.proto." +
      "ProtoDialect\032\313\001\n\rTableManifest\022\022\n\ntable_" +
      "name\030\001 \001(\t\022\025\n\rfile_patterns\030\002 \003(\t\022]\n\007col" +
      "umns\030\003 \003(\0132L.com.google.cloud.teleport.s" +
      "panner.proto.ImportManifest.TableManifes" +
      "t.Column\0320\n\006Column\022\023\n\013column_name\030\001 \001(\t\022" +
      "\021\n\ttype_name\030\002 \001(\tB;\n\'com.google.cloud.t" +
      "eleport.spanner.protoB\020TextImportProtosb" +
      "\006proto3"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.cloud.teleport.spanner.proto.ExportProtos.getDescriptor(),
        }, assigner);
    internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_descriptor,
        new java.lang.String[] { "Tables", "Dialect", });
    internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_descriptor =
      internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_descriptor.getNestedTypes().get(0);
    internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_descriptor,
        new java.lang.String[] { "TableName", "FilePatterns", "Columns", });
    internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_Column_descriptor =
      internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_descriptor.getNestedTypes().get(0);
    internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_Column_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_com_google_cloud_teleport_spanner_proto_ImportManifest_TableManifest_Column_descriptor,
        new java.lang.String[] { "ColumnName", "TypeName", });
    com.google.cloud.teleport.spanner.proto.ExportProtos.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
